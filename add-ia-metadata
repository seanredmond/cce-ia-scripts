#!/usr/bin/env python3

import csv
import lccnorm
import requests
import sys
from globals import TSV_FIELDS


def extract_oclc(md):
    if not md:
        return None

    if isinstance(md, str):
        return extract_oclc([md])

    oclcs = [o.split(":")[-1] for o in md if "urn:oclc:record" in o]

    if oclcs:
        return (";").join(oclcs)

    return None


def norm_lccn(lccn):
    if lccn is None:
        return None

    if isinstance(lccn, list):
        return ";".join(set([lccnorm.normalize(l) for l in lccn]))

    return lccnorm.normalize(lccn)


def join_if_list(s):
    if s is None:
        return None

    if isinstance(s, list):
        return "; ".join(s)

    return s


def extract_identifiers(md):
    return {"lccn": norm_lccn(md["metadata"].get("lccn")),
            "openlibrary": md["metadata"].get("openlibrary"),
            "oclc": extract_oclc(md["metadata"].get("external-identifier"))}


def format_book(md):
    info = [md["metadata"].get("creator"), md["metadata"].get("title"),
            md["metadata"].get("publisher"), md["metadata"].get("date")]

    return ", ".join([join_if_list(i) for i in info if i is not None])


def get_ia_metadata(ia_id):
    r = requests.get("https://archive.org/metadata/{}".format(ia_id))
    r.raise_for_status()
    return r.json()


reader = csv.DictReader(sys.stdin, delimiter="\t")
writer = csv.DictWriter(sys.stdout, delimiter="\t",
                        fieldnames=TSV_FIELDS)
writer.writeheader()
for line in reader:
    try:
        md = get_ia_metadata(line["ia_id"])
        ids = extract_identifiers(md)

        line["ia-book"] = format_book(md)
        line["ia-date"] = join_if_list(md["metadata"].get("date"))
        line["ia-openlibrary"] = ids["openlibrary"]
        line["ia-lccn"] = ids["lccn"]
        line["ia-oclc"] = ids["oclc"]
        writer.writerow(line)
    except Exception:
        print("Could not get metadata for {}".format(line["ia_id"]),
              file=sys.stderr)
