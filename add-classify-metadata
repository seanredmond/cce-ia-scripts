#!/usr/bin/env python3

import csv
import requests
import sys
import xml.etree.ElementTree as ET
from globals import TSV_FIELDS


def classify_response_code(xml):
    return int(xml.find(
        './/{http://classify.oclc.org}response').attrib['code'])


def get_by_oclc(oclc):
    r = requests.get(
        "http://classify.oclc.org/classify2/Classify?oclc={}".format(oclc))
    r.raise_for_status()
    root = ET.fromstring(r.text)
    return extract_classify(root)


def get_by_lccn(lccn):
    r = requests.get(
        "http://classify.oclc.org/classify2/Classify?lccn={}".format(lccn))
    r.raise_for_status()
    root = ET.fromstring(r.text)
    return extract_classify(root)


def extract_classify(xml):
    rc = classify_response_code(xml) 
    if rc == 2:
        work = xml.find(".//{http://classify.oclc.org}work")
        book = ", ".join(
            [g for g in
             [work.attrib.get(f) for f in ["author", "title"]]
             if g is not None])
        return {"oclc-book": book,
                "oclc-owi": work.attrib.get("owi"),
                "oclc-main-id": work.text,
                "oclc-type": work.attrib.get("format"),
                "oclc-editions": work.attrib.get("editions"),
                "oclc-holdings": work.attrib.get("holdings"),
                "oclc-eholdings": work.attrib.get("eholdings")}

    if rc == 102:
        return {}


    if rc == 4:
        return {"oclc-owi": "; ".join([w.attrib["owi"] for w in xml.findall(".//{http://classify.oclc.org}work")])}
    
    raise Exception(
        "Classify response code {}".format(classify_response_code(xml)))

reader = csv.DictReader(sys.stdin, delimiter="\t")
writer = csv.DictWriter(sys.stdout, delimiter="\t",
                        fieldnames=TSV_FIELDS)
writer.writeheader()

for line in reader:
    if line["ia-oclc"]:
        cfy = get_by_oclc(line["ia-oclc"])
    elif line["ia-lccn"]:
        cfy = get_by_lccn(line["ia-lccn"])
    else:
        cfy = {}
    writer.writerow({**line, **cfy})
